#include <vector>
#include <iostream>

using namespace std;

const bool CLEAR_SCREEN = true;


void clearScreen() {
    cout << endl;

    if (CLEAR_SCREEN)
    {
        cout << "\033c";
    }

    cout << endl;

    return;
}


void drawBoard(const vector < char >&gameBoard) {
    clearScreen();
    for (int i = 0; i < 9; i += 3)
    {
        cout << "  " << gameBoard.at(i) << "  |  " << gameBoard.at(i + 1) << "  |  "
            << gameBoard.at(i + 2) << "  " << endl;
        if (i < 6)
            cout << "-----|-----|-----" << endl;
    }
    cout << endl;

    return;
}


void initVector(vector <char> &v) {
    char emptyBoardVar = 'a';
    for (int i = 0; i < 9; i++){
        v.at(i) = emptyBoardVar;
        emptyBoardVar++;
    }
    return;
}


int convertPosition(char boardPosition) {
    
    char charToNum = 'a';
    for (int i = 0; i < 9; i++){
        if (boardPosition == charToNum) {
            return i;
        }
        charToNum++;
    }
    
    return -1; 
}


bool validPlacement(const vector <char> &gameBoard, int positionIndex) {
    
    if (gameBoard.at(positionIndex) >= 'a' && gameBoard.at(positionIndex) <= 'i')  {
        return true;
    }
    return false;
}


int getPlay(const vector <char> &gameBoard) {
    char boardPosition = ' ';
    int positionIndex = 0;
    bool validPlay = true;
    bool playAgain = true;
    
    while (playAgain) {
        boardPosition = ' ';
        cout << "Please choose a position: ";
        cin  >> boardPosition;
        cout << endl;
        
        positionIndex = convertPosition(boardPosition);
        
        validPlay = validPlacement(gameBoard, positionIndex);
        if (validPlay) {
            playAgain = false;
        }
        // else {
        // playAgain = false;
        // }
    }
    return positionIndex;

    return -1;
}



bool gameWon(const vector <char> &gameBoard) {

    if (gameBoard.at(0) == gameBoard.at(1) && gameBoard.at(1) == gameBoard.at(2)) {
        return true;
    }
    else if (gameBoard.at(0) == gameBoard.at(3) && gameBoard.at(3) == gameBoard.at(6)) {
        return true;
    }
    else if (gameBoard.at(0) == gameBoard.at(4) && gameBoard.at(4)  == gameBoard.at(8)) {
        return true;
    }
    else if (gameBoard.at(1) == gameBoard.at(4) && gameBoard.at(4) == gameBoard.at(7)) {
        return true;
    }
    else if (gameBoard.at(2) == gameBoard.at(5) && gameBoard.at(5) == gameBoard.at(8)) {
        return true;
    }
    else if (gameBoard.at(2) == gameBoard.at(4) && gameBoard.at(4) == gameBoard.at(6)) {
        return true;
    }
    else if (gameBoard.at(3) == gameBoard.at(4) && gameBoard.at(4) == gameBoard.at(5)) {
        return true;
    }
    else if (gameBoard.at(6) == gameBoard.at(7) && gameBoard.at(7) == gameBoard.at(8)) {
        return true;
    }
    
    
    
    return false;
}



bool boardFull(const vector <char> &gameBoard) {
    int spacesUsed = 0;
    for (int i = 0; i < 9; i++) {
        if (!(gameBoard.at(i) >= 'a' && gameBoard.at(i) <= 'i')) {
            spacesUsed += 1;
        }
    }
    if (spacesUsed == 9) {
        return true;
    }
    return false;
}


// Global constants for player representation
const int PLAYER1 = 0;
const int PLAYER2 = 1;

int main() {
    // Variables that you may find useful to utilize
    vector <char> gameBoard(9);
    int curPlay = 0;
    int whosTurn = PLAYER1; // Player 1 always goes first and is 'X'
    char gameChar = 'X';
    bool fullBoard = false;
    bool didWin = false;
    
    initVector(gameBoard);
    
    drawBoard(gameBoard);

    
    while (!(fullBoard)){
    
        curPlay = getPlay(gameBoard);
        
        gameBoard.at(curPlay) = gameChar;
        
        drawBoard(gameBoard);
        
        
        
        didWin = gameWon(gameBoard);
        if (didWin == true) {
            break;
        }
        
        if (whosTurn == PLAYER1){
            whosTurn = PLAYER2;
            gameChar = 'O';
        }
        else {
            whosTurn = PLAYER1;
            gameChar = 'X';
        }
        
        
        
    }
    fullBoard = boardFull(gameBoard);
    
    if (fullBoard && !(didWin)) {
        cout << "No one wins" << endl;
    }
    else {
        if (whosTurn == PLAYER1) {
            cout << "PLAYER 1 WINS!" << endl;
        }
        else {
            cout << "PLAYER 2 WINS!" << endl;
        }
    }
    return 0;
}
